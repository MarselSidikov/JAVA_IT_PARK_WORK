1. Инфраструктура java
 - JVM, JDK, JRE, java, javac, .java, .class
2. Система типов java
 - примтивные типы, ссылочные типы, размеры типов, различия между типами, явное и неявное приведения
3. Массивы
 - понятие массива, размер массива, варианты инициализации,размер массива, сортировки (вставками, пузырьком)
4. Подпрограммы
 - функции, процедуры, формальные параметры, аргументы, различия между функциями и процедурами
5. ООП
 - инкапсуляция, наследование, полиморфизм, классы, объекты, интерфейсы, абстрактные классы, финальные классы, поля, методы, геттеры/сеттеры, конструкторы, статические члены класса и статические инициализаторы, модификаторы доступа, уровни доступа, константы внутри классов, восходящее преобразование, обобщения
6. Класс Object
 - описание класса, toString, equals, hashCode
7. Java IO
 - Reader, Writer, InputStream, OutputStream, + работа с файлами с помощью BufferedReader
8. Java Collections
 - Iterator, Iterable, ArrayList, LinkedList, List, Map, HashMap, Set, Hashset.
9. Comparator и Comparable
10. Threads
 - Понятие потока и процесса, кеширование примитивных типов и модификатор volatile, создание пользовательских потоков, Runnable и Thread, join, sleep, wait, notify, notifyAll, synchronized, Deadlock
11. Web + Java
- протокол http, клиент-серверная архитектура, сервлеты, контейнеры сервлетов, jsp
12. БД + Java
- понятие бд, таблицы, первычные ключы, внешние ключи, строки и столбцы, связи между таблицами. Технология jdbc, JPA, ORM, Hibernate
13. Spring 
- понятие бинов, понятие DI, понятие IoC-контейнера, область видимости бинов (bean scope), ApplicationContext, @Bean, @Autowired, @ComponentScan, @Component, xml-конфигурация
14. Maven,git, junit
- для чего нужно, основные понятия
15. Spring Web 
- @Controller, @RestController, @RequestBody, @ResponseBody, ResponseEntity, @PathVariable, @RequestParam, @RequestHeader, диспатчер-сервлет, ModelAndView + Freemarker
16.JavaFx
- @FXML, понятие JavaFX

13) Проблема:
1) Сильные связи между классами
class A {
	private B b;
	
	public A() {
		b = new B();
	}
}
---------
class A {
	private C c;
	
	public A(C c) {
		this.c = c;
	}
}, где C - предок B
---------
2) Где-то все равно объекты надо создавать и где-то нужно связывать объекты между собой. КТО?
DI - инъекция зависимостей (разновидность IoC) - связь между компонентами, а также их инстантивация выносится в отдельный модуль IoC-контейнер.
Spring - мощная реализия DI, фреймворк построенный по принципу DI
IoC-контейнер => ApplicationContext (и его реализации - xml, annotation-based)
Компоненты -> бины

Каждый бин имеет scope - singleton (один объект на один контейнер), prototype(на каждый вызов (инъекцию) создается новый объект)
xml-конфигурация - создается внешний xml-файл со списком бинов (каждый бин помечается id и классом, экзепляром которого является данный бин), а также указываются зависимости - ref и value

@Bean - данной аннотацией помечается фабричный метод, который создает объект, который будет бином
@Autowired - находит подходящий по типу бин и инджектит его в конструктор, сеттер или поле.
@Component (синонимы @Repository, @Service) - класс, объект которого будет бином

xml - без компиляции, когда бины меняются часто
@Bean - когда требуется специфичная конфигурация бина
@Component - когда не требуется частая перекомпиляция (конфигурация часто не меняется), когда не требуется специфичная настройка, когда класс написан вами и поддерживает DI

14) Maven - инструмент, выполняющий сборку проекта.
Сборка - компиляция и упаковка в jar/war + модульное тестирование
pom.xml - файл, идентифицирующий maven-проект
- groupId - организация
- artifactId - проект
- version - версия

Возможности:
- подключение зависимостей от библиотек - изначально maven выполняет поиск библиотеки в папке m2, далее, в случае ее отсуствия, ищет в Maven Repository - список ссылок
- различные плагины

Фазы сборки:
clean - очистка target папка
compile - .java -> .class
test - модульные тесты
package - упаковка в jar/war
install - перемещение jar в папку .m2
deploy - перемещение в удаленный репозиторий

JUNIT
- инструмент (библиотека) для модульного тестирования. 
Модульное тестирование - тестирование отдельных модулей независимо друг от друга.

@Test
@Before
@After
assertEquals
assertTrue

Связные понятия:
Mock-тестирование.
---------------------------------
Spring Web 
DI над клиент-серверной архитектурой
Контроллер - сервлет, включенный в инфраструктуру Spring, принимает запросы и занимается их обработкой.
DispatcherServlet - класс Spring, принимает на себя ВСЕ запросы и распределяет по контроллерам (в вк описание принципа работы).
MVC - в контексте спринга, это набор контроллеров, которые принимая запрос создают объект ModelAndView (JSP) в данный объект кладут имя вьюшки + данные.
View - обычно html-страница, полученная либо методами JSP, либо Freemarker







